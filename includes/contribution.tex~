\section{Contribution}
\subsection{Short reminder on the NP-completeness theory}
A decision problem is a couple $(\Omega, S)$. $\Omega$ is described in
the section \textsc{Input} and is a set of words called instances of
the problem. $S$ is described in the section \textsc{Output} and is a
language included in $\Omega$. $S$ corresponds to the set of instances
for which the answer to the problem is ``yes'' (figure \ref{fig:problem}).

For example, the optimisation problem NST can be rephrased as the
following decision problem:\\
\textsc{Input:} A tree $T$, an integer $k \in \mathbb{N}$\\
\textsc{Output:} Yes if and only if there exists a self-nested tree $S$
such as the edit distancee between $T$ ans $S$ is less than $k$.\\
Here, each couple $(T,k)$ is an instance, and $\Omega$ is the set of all
the instances.
 
\begin{figure}[h]
  \centering
  \begin{subfigure}[b]{0.4\textwidth}
    \centering  
    \includegraphics[width=.9\textwidth]{figures/problem.pdf}
    \caption{Algorithmic problem}
    \label{fig:problem}
  \end{subfigure}
  \begin{subfigure}[b]{0.5\textwidth}
    \centering
    \includegraphics[width=\textwidth]{figures/reduction.pdf}
    \caption{Example of reduction}
    \label{fig:reduction}
  \end{subfigure}
%  \caption{Example of computation on the DAG}\label{fig:compute}
\end{figure}

The complexity class P is the class of problems for which there exists
a deterministic Turing machine deciding $S$ in a time polynomial to
the size of the instance. The complexity class NP consists of the
problems for which $S$ is accepted by a non-deterministic Turing
machine in polynomial time.

A reduction from a problem $A$ to a problem $B$ is a function
$f : \Omega_{A} \rightarrow \Omega_{B}$ such as for all instance
$\omega_{A}$ of $A$,
$\omega_{A} \in S_{A} \Leftrightarrow f(\omega_{a}) \in S_{B}$ (figure
\ref{fig:reduction}). As a result, if there exists a polynomial
reduction between $A$ and $B$ then $B$ is ``harder'' than $A$. Indeed,
if $S_{B}$ is accepted (respectively decided) by a Turing machine in
polynomial time, to accept (respectively decide) $S_{A}$ in polynomial
time, all there is to do is to apply the reduction to the instance of
$A$ and return the result computed by the Turing machine of the
problem $B$.
 
An algorithmic problem is called NP-hard if there exists a polynomial
reduction from each problem of the NP class to this one. The problems
that are both NP-hard and belong to the NP class are said to be
NP-complete.

\subsection{Proof of the belonging to the NP class}

We aim to prove that the NST decision problem is NP-complete. It
clearly belongs to the class NP. Indeed, for all tree $T = (V,E)$, the
number of trees $T_{i}$ at distance less than $k$ of $T$ is finite and
enumerable, furthermore, it is possible to test if
a tree is self-nested in a time polynomial to the number of nodes
within it. The number of nodes in each $T_{i}$ is necessarily bounded
by $|V| + k$, it is consequently possible to verify simultaneously
on a non-deterministic Turing machine if one of those trees $T_{i}$ is
self-nested, in a time polynomial to $|T|$ and $k$.

\subsection{Intuition guiding the researches}
To help us build the reduction, a few conceptual remarks can be made,
in order to guid the researchs. First of all, the reduction has no
obligation to be surjective, as a matter of fact, it is quite often
not surjective. The image of the reduction has to be small enough to know the
general form of the solution of each instance in order to be able to
prove the equivalence
$\omega_{A} \in S_{A} \Leftrightarrow f(\omega_{a}) \in S_{B}$ (where
$A$ is the initial NP-complte problem and $B$ is the problem we
consider). Yet, if the image of $\Omega_{A}$ by the reduction has to
be big enough so that we are enable to find a polynomial algorithm
solving the problem on the set of images of the reduction. Indeed,
finding such an aglorithm and a reduction would mean we would have
solved the open question of the equality of the P and NP classes,
which is unreasonable.

Furtermore, we can observe that generally, the
construction of the image instance seems to be combination of two
different things: a part that reflects only the number of variables in
the instance of the first problem and a part reflecting the links and
constraints that they have with one another.
For example, in the proof of the reduction from 3-SAT to INDEP-SET  \cite{polytech},
the first part consists in the triangles corresponding to each clause
of the initial instance, and the second to the edges linking the nodes
such as one is labeled with the negation of the other.
In the proof of the reduction from VERTEX-COVER to HAMILTONIAN-CYCLE  \cite{polytech},
the first part consists in the 12 nodes widgets corresponding to each
edge of the initial graph, and the second part consists in the way they are
linked to one another to form the image graph.

We can also observe that in the first part, to each variable of the
initial instance corresponds a piece of the image instance, that is
very restrictive and can be used in a solution only in a few (2 or 3
most of the time) different ways. For example in the proof of the
reduction from VERTEX-COVER to HAMILTONIAN-CYCLE \cite{polytech}, the
widgets can either be visited in one go or in two.

Furthermore the way these pieces are used is completly independant
until the second part corresponding to the constraints between the
variables is added.

\subsection{Trees of height 2 without variation of the height}
The edit distance with constraint of K.Zhang being slightly difficult
to manipulate, we will use a far more restrictive variant in this
section: the additions and deletions must be of leaves and not
internal nodes. More precisely, if $u$ is an ancestor of $v$ in $T$
and $v \in V'_{1}$ then $u \in V'_{1}$.

In this section we present a polynomial algorithm computing the
nearest self-nested tree of height 2 to a tree of height 2.

\subsection{Trees of height 2 with variation of the height}
In this section, we present a polynomial algorithm computing the nearest
self-nested tree to a tree of height 2.

\subsection{Family of bricks}
In this section, we present a family of trees that could be used as
the first part of the reduction to represent the variables of the
initial instance.